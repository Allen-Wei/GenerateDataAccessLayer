
    public interface IGenericRepository<T> where T : class
    {

        /// <summary>
        /// Find all records
        /// </summary>
        /// <returns>IQueryable</returns>
        IQueryable<T> FindAll();    

        /// <summary>
        /// Get one record by condition
        /// </summary>
        /// <param name="condition">Filter condition</param>
        /// <returns>T</returns>
        T FindOne(Expression<Func<T, bool>> condition);

        /// <summary>
        /// Query by filter
        /// </summary>
        /// <param name="filter">Filter</param>
        /// <returns>IQueryable</returns>
        IQueryable<T> Query(Expression<Func<T, bool>> filter);

        /// <summary>
        /// Query by filter with page
        /// </summary>
        /// <typeparam name="TKey">Order Key</typeparam>
        /// <param name="filter">Filter</param>
        /// <param name="order">Order by</param>
        /// <param name="skip">Skip count</param>
        /// <param name="take">Take count</param>
        /// <returns>IQueryable</returns>
        IQueryable<T> Query<TKey>(Expression<Func<T, bool>> filter, Expression<Func<T, TKey>> order, int skip, int take);

        /// <summary>
        /// Query by filter with page
        /// </summary>
        /// <typeparam name="TKey">Order Key</typeparam>
        /// <param name="filter">Filter</param>
        /// <param name="order">Order by</param>
        /// <param name="skip">Skip count</param>
        /// <param name="take">Take count</param>
        /// <returns>IQueryable</returns>
        IQueryable<T> QueryDescending<TKey>(Expression<Func<T, bool>> filter, Expression<Func<T, TKey>> order, int skip, int take);

        /// <summary>
        /// Records count
        /// </summary>
        /// <param name="filter">Filter</param>
        /// <returns>IQueryable</returns>
        long TotalRecords(Expression<Func<T, bool>> filter);

        bool IsExist(Expression<Func<T, bool>> condition);



        /// <summary>
        /// Add record
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <returns>T</returns>
        T Insert(T entity);

        IEnumerable<T> InsertMulti(IEnumerable<T> entities);

        /// <summary>
        /// Delete record
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <returns>Deleted or not</returns>
        bool Delete(T entity);

        /// <summary>
        /// Delete record by condition
        /// </summary>
        /// <param name="condition"></param>
        /// <returns>Deleted or not</returns>
        bool Delete(Expression<Func<T, bool>> condition);

        /// <summary>
        /// Delete records
        /// </summary>
        /// <param name="condition">Condition</param>
        /// <returns>Deleted or not</returns>
        bool DeleteMulti(Expression<Func<T, bool>> condition);

        /// <summary>
        /// Update record
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <returns>Updated or not</returns>
        bool Update(T entity);

        void Save();
    }
    public class GenericRepository<T> : IGenericRepository<T> where T : class
    {
        private [ModelContextName]Repository<T> context;
        public GenericRepository()
        {
            this.context = new [ModelContextName]Repository<T>();
        }

        public IQueryable<T> FindAll()
        {
            return this.context.GetTable<T>();
        }
        public T FindOne(Expression<Func<T, bool>> condition)
        {
            return this.FindAll().FirstOrDefault(condition);
        }
        public IQueryable<T> Query(Expression<Func<T, bool>> filter)
        {
            return this.FindAll().Where(filter);
        }
        public IQueryable<T> Query<TKey>(Expression<Func<T, bool>> filter, Expression<Func<T, TKey>> order, int skip, int take)
        {
            return this.Query(filter).OrderBy(order).Skip(skip).Take(take);
        }
        public long TotalRecords(Expression<Func<T, bool>> filter)
        {
            return this.context.GetTable<T>().Where(filter).LongCount();
        }
        public T Add(T entity)
        {
            this.context.GetTable<T>().InsertOnSubmit(entity);
            return entity;
        }

        public bool Delete(T entity)
        {
            this.context.GetTable<T>().DeleteOnSubmit(entity);
            return true;
        }
        public void Save()
        {
            this.context.SubmitChanges();
        }


        public IQueryable<T> QueryDescending<TKey>(Expression<Func<T, bool>> filter, Expression<Func<T, TKey>> order, int skip, int take)
        {
            return this.Query(filter).OrderByDescending(order).Skip(skip).Take(take);
        }

        public T Insert(T entity)
        {
            this.context.GetTable<T>().InsertOnSubmit(entity);
            return entity;
        }

        public bool Delete(Expression<Func<T, bool>> condition)
        {
            var entity = this.FindOne(condition);
            if (entity == null) return false;
            this.context.GetTable<T>().DeleteOnSubmit(entity);
            return true;
        }

        public bool DeleteMulti(Expression<Func<T, bool>> condition)
        {
            var entities = this.Query(condition);
            this.context.GetTable<T>().DeleteAllOnSubmit(entities);
            return true;
        }

        public bool Update(T entity)
        {
            throw new NotImplementedException();
        }


        public bool IsExist(Expression<Func<T, bool>> condition)
        {
            return this.context.GetTable<T>().Any(condition);
        }


        public IEnumerable<T> InsertMulti(IEnumerable<T> entities)
        {
            this.context.GetTable<T>().InsertAllOnSubmit(entities);
            return entities;
        }
    }

    public class [ModelContextName]Repository<T> : [BaseNamespace].[ModelNamespace].[ModelContextName] where T : class {}
